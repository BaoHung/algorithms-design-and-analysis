Week 5
-----------------------------
XI. DIJKSTRA'S SHORTEST-PATH ALGORITHM
-----------------------------
Single-Source Shortest Paths:
-----------------------------
Input: directed graph G=(V, E). (m=|E|, n=|V| )
• each edge has non negative length le
• source vertex s
Output: for each , compute
• L(v) := length of a shortest s-v path in G
  (Length of path = sum of edge lengths)
Replace each edge e by directed path of le unit length edges: blows up graph too much

Dijkstra’s Algorithm:
---------------------
Initialize:
• X	= [s] [vertices	processed so far]
• A[s] = 0 [computed shortest path distances]
• B[s] = empty path [computed shortest paths] - This array only to help explanation!
Main Loop:
• while XǂV:
• among all edges (v, w) with v in X, w not in X, pick one that minimizes A[v] + lvw
  [call it (v*, w*)]
• add w* to	X
• set A[w*] := A[v*] + lv*w*
• set B[w*] := B[v*]u(v*, w*)

Correctness:
------------
Proof by induction on the number of iterations (must use "one-negative" condition)

Implementation and running time:
--------------------------------
- won't use B[s]
- natively (n - 1) iterations of while loop, Theta(m) work per iteration, Theta(1)work per edge
=> Theta(mn)

Optimized by Heap operations:
-----------------------------
raison d’être of heap = perform Insert, Extract-Min in O(log n) time.
• conceptually, a perfectly balanced binary tree
• Heap property: at every node, key <= children’s keys
• extract-min by swapping up last leaf, bubbling down
• insert via bubbling up
Also: will need ability to delete from middle of heap. (bubble up or down as needed)

Two	Invariants:
    - Invariant # 1: elements in heap = vertices of V-X.
    - Invariant #2: for Key[v] = smallest Dijstra greedy score of an edge (u, v)
    in E with v in X (of + if no such edges exist)
    - Point: by invariants, ExtractMin yields correct vertex w* to add to X next.
    (and we set A[w*] to key[w*])

To maintain Invariant #2: [i.e., that for all v not in X, Key[v] = smallest Dijkstra
greedy score of edge (u,v) with u in X]

When w extracted from heap (i.e., added to X)
• for each edge (w,v) in E:
• if v in V-X (i.e., in heap)
• delete v from heap
• recompute key[v] = min{key[v] , A[w] + lwv }
• re-Insert v into heap

Running	Time Analysis:
    dominated by heap operations. (O(log(n)) each )
    • (n-1) Extract mins
    • each edge (v,w) triggers at most one Delete/Insert combo
    (if v added to X first)
    So: # of heap operations in O(n+m) = O(m)
    So: running time = O(m log(n)) (like sorting)

-----------------------------
XII. HEAPS
-----------------------------
Data structures:
----------------
Point: organize	data so	that it	can	be accessed	quickly	and	usefully.
Examples: lists, stacks, queues, heaps,	search trees, hashtables, bloom	filters,
union-find, etc.
Rule of	Thumb: choose the “minimal”	data structure that	supports all the opera/ons
that you need.

Heap: supported operations
--------------------------
- A	container for objects that have	keys
- Employer records,	network	edges, events, etc.
Insert:	add	a new object to	a heap.
    - Running time: O(log(n))
Extract-Min: remove	an object in heap with a minimum key value.	[ties broken arbitrarily]
    - Running time:	O(log n) [n	= #	of objects in heap]
Also: HEAPIFY(n	batched	Inserts	in O(n)	time), DELETE(O(log(n))	time)

Application: Sorting
--------------------
Canonical use of heap: fast	way	to do repeated minimum computations.
Example: SelectionSort ~ Theta(n) linear scans, Theta(n^2) runtime on array	of length n
Heap Sort: 1.) insert all n array elements into	a heap
           2.) Extract-Min to pluck	out	elements in	sorted order
Running	Time = 2n heap opera4ons = O(nlog(n)) time.

Application: Event Manager
--------------------------
“Priority Queue” – synonym for a heap.
Example: simulation	(e.g., for a video game)
- Objects = event records [Action/update	to occur at	given time in the future]
- Key =	time event scheduled to	occur
- Extract-Min => yields	the	next scheduled event

Application: Median Maintenence
-------------------------------
Input:	a sequence x1,…,xn of numbers, one-by-one.
Output:	at each	time step i, the median	of {x1,….,xi}.
Constraint:	use	O(log(i)) time at each step	i.
Solution: maintain heaps H_Low: supports Extract Max
                         H_High: supports Extract Min
Key	Idea: maintain invariant that ~	i/2	smallest (largest) elements	in H_Low(H_High)
1.)	can	maintain invariant with	O(log(i)) work
2.)	given invariant, can compute median	in O(log(i)) work

Application: Speeding Up Dijkstra
---------------------------------
- Naïve implementation => runtime = Theta(nm)
- with heaps =>	runtime	= O(m log(n))

The Heap Property:
------------------
Conceptually: as a tree - rooted, binary, as complete as possible
Property: at every node of x, Key[x] <= all keys of x's children
Consequence: object at root must have minimum key value
Array implementation:
    parent(i) = i/2 if i is even, [i/2](round down) if i is odd
    children(i) = 2i, 2i+1

Insert and Bubble-Up:
---------------------
Implementation of Insert (given	key	k)
Step 1: stick k	at end of last level.
Step 2:	Bubble-Up k	until heap property	is restored	(i.e., key of k’s parent <=	k)
run time = O(log(n))

Extract-Min	and	Bubble-Down:
----------------------------
Implementation of Extract-Min
1. Delete root
2. Move	last leaf to be	new	root.
3. Iteratively Bubble-Down until heap property has been	restored
[always	swap with smaller child!]
run	time = O(log(n))
